// code

let playersData = JSON.parse(localStorage.getItem('playersData')) || [];

let gameSettings = {
    numberOfLives: 500,
    maxNumberOfPlayers: 10
};

const cardsList = document.querySelector('.cards-list');
cardsList.addEventListener('click', addPoints);
cardsList.addEventListener('click', callModalNewPlayer);

const btnNewGame = document.querySelector('[data-button-name="new-game"]');
btnNewGame.addEventListener('click', callModalNewGame);

const btnNewRound = document.querySelector('[data-button-name="new-round"]');
btnNewRound.addEventListener('click', callModalNewRound);

const btnDisplayGameRules = document.querySelector('[data-button-name="display-game-rules"]');
btnDisplayGameRules.addEventListener('click', displayGameRules);

const btnGameSettings = document.querySelector('[data-button-name="game-settings"]');
btnGameSettings.addEventListener('click', editGameSettings);

const modalWindow = document.querySelector('.modal-window');
const backgroundModalWindow = document.querySelector(".modal-background");

const btnFreePik = document.querySelector('[data-button-name="thanks"]');
btnFreePik.addEventListener('click', callModalFreePik);

displayCards(playersData);

// functions

function displayCards(data) {
    cardsList.innerHTML = '<button class="add-player-btn">–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞...</button>' + data.map(playerInfo => {
        return createCard(playerInfo);
    }).join('');

    localStorage.setItem('playersData', JSON.stringify(data));
}

function createCard(playerData) {
    let playerCardPointsList = "";
    if (playerData.pointsList.length) {
        playerData.pointsList.forEach(pointsValue => playerCardPointsList += `<div class="player-card__points-list-item">${pointsValue}</div>`);
    }
    return `
        <div class="player-card" data-player-id="${playerData.playerId}">
            <header class="player-card__header">
                <div class="player-card__name">${playerData.playerName}</div>
                <div class="player-card__current-points">${String(playerData.currentPoints)}</div>
            </header>
            <div class="player-card__photo">
                <img class="player-card__img" src="${playerData.playerAvatar}" alt="–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–≥—Ä–æ–∫–∞ ${playerData.playerName}" style="filter: hue-rotate(${playerData.avatarModificator}deg);">
            </div>
            <div class="player-card__points-list">
                ${playerCardPointsList}
            </div>
            <div class="player-card__footer">
                <input class="player-card__input" type="number">
                <button class="player-card__add-points-btn" data-player-id="${playerData.playerId}">OK</button>
            </div>
        </div>
    `;
}

function callModalNewPlayer(e) {
    if (!e.target.matches('.add-player-btn')) return; 
    if (playersData.length >= gameSettings.maxNumberOfPlayers) {
        const formContent = `
            <form name="information" id="information" class="modal-window__form">
                <p>–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!</p>
                <button type="button" onclick="closeModalWindow();">OK</button>
            </form>
        `
        callModalWindow('–£–ø—Å!', formContent)
        return;
    }
    const formContent = `
        <form name="new-player" id="new-player" class="modal-window__form">
            <label for="new-player-name">–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞:</label>
            <input id="new-player-name" name="new-player-name" type="text">
            <button type="button" onclick="createNewPlayer()">–°–æ–∑–¥–∞—Ç—å</button>
        </form>
    `
    callModalWindow('–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞', formContent)
}

function createNewPlayer() {
    const playerIndex = playersData.length;
    playerName = document.querySelector('#new-player-name').value;
    if (playerName === null || playerName === '') {
        return
    }
    playersData[playerIndex] = {
        playerName,
        currentPoints: gameSettings.numberOfLives,
        pointsList: [],
        playerAvatar: 'img/player-card__photo/' + randomInteger(0, 16) + '.png',
        avatarModificator: randomInteger(0, 360),
    };
    if (playersData.length === 1) {
        playersData[playerIndex].playerId = 0;
    } else {
        let maxId = 0;
        playersData.forEach(player => {
            if (player.playerId > maxId) {
                maxId = player.playerId;
            }
        });
        playersData[playerIndex].playerId = maxId + 1;
    }
    displayCards(playersData);
    closeModalWindow()
}

function addPoints(e) {
    if (!e.target.matches('button')) return;
    const playerId = e.target.dataset.playerId;
    const input = document.querySelector(`.player-card[data-player-id="${playerId}"] .player-card__input`);
    const pointsValue = input.value;
    if (pointsValue === undefined || !isNumeric(pointsValue) || pointsValue < 0) {
        const formContent = `
            <form name="information" id="information" class="modal-window__form">
                <p>–°—É–º–º–∞ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏–ª–∏ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é!</p>
                <button type="button" onclick="closeModalWindow();">OK</button>
            </form>
        `
        callModalWindow('–£–ø—Å!', formContent)
        return;
    }
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º —É –≤—Å–µ—Ö –ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –æ—á–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤ –∑–∞–ø–∏—Å–∞–Ω—ã
    const pointsListLength = playersData[playerId].pointsList.length;
    isAllRoundWrote = true;
    playersData.forEach(player => pointsListLength > player.pointsList.length ? isAllRoundWrote = false : '')
    if (!isAllRoundWrote) {
        const formContent = `
            <form name="information" id="information" class="modal-window__form">
                <p>‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞—É–Ω–¥–∞—Ö —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤!</p>
                <button type="button" onclick="closeModalWindow();">OK</button>
            </form>
        `;
        callModalWindow('–£–ø—Å!', formContent);
        return
    }
    // –¥–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –æ—á–∫–æ–≤ –≤ pointsList –∏–≥—Ä–æ–∫–∞
    if (pointsValue == 0) {
        playersData[playerId].pointsList[pointsListLength] = 'üéà0 - –í—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã!üéà'
    } else {
        playersData[playerId].pointsList[pointsListLength] = '-'+pointsValue;
    }

    playersData[playerId].currentPoints -= pointsValue;
    input.value = '';

    displayCards(playersData);
};

function randomInteger(min, max) {
    let rand = min - 0.5 + Math.random() * (max - min + 1)
    rand = Math.round(rand);
    return rand;
}

function isNumeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}

function callModalNewGame() {
    const formContent = `
        <form name="new-game" id="new-game" class="modal-window__form">
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É? –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä–æ–∫–∞—Ö –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞!</p>
            <button type="button" onclick="startNewGame()">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
        </form>
    `
    callModalWindow('–ù–æ–≤–∞—è –∏–≥—Ä–∞', formContent)
}

function startNewGame() {
    playersData = [];
    displayCards(playersData);
    closeModalWindow()
}

function callModalNewRound() {
    const formContent = `
        <form name="new-round" id="new-round" class="modal-window__form">
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —Å —Ç–µ–∫—É—â–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏?</p>
            <button type="button" onclick="startNewRound()">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
        </form>
    `
    callModalWindow('–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥', formContent)
}

function startNewRound() {
    playersData.forEach(player => {
        player.currentPoints = gameSettings.numberOfLives;
        player.pointsList = [];
    })
    displayCards(playersData);
    closeModalWindow()
}

function displayGameRules() {
    const formContent = `
        <form name="information" id="information" class="modal-window__form">
            <p>üò• –ò—Ö —Å—ä–µ–ª–∞ —Å–æ–±–∞–∫–∞! –ß–µ—Å—Ç–Ω–æ ...</p>
            <button type="button" onclick="closeModalWindow();">OK</button>
        </form>
    `;
    callModalWindow('–£–ø—Å!', formContent);
}

function editGameSettings() {
    const formContent = `
        <form name="game-settings" id="game-settings" class="modal-window__form">
            <label for="number-of-lives">–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π –Ω–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã:</label>
            <input id="number-of-lives" name="number-of-lives" type="text" value="500">
            <label for="number-of-players">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:</label>
            <input id="number-of-players" name="number-of-players" type="text" value="10">
            <button type="button" class="game-settings-form-btn" onclick="applySettings()">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
        </form>
    `
    callModalWindow('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã', formContent)
}

function applySettings() {
    let newNumberOfLives = document.querySelector("#number-of-lives").value;
    let newMaxNumberOfPlayers = document.querySelector("#number-of-players").value;
    if (newNumberOfLives === undefined || !isNumeric(newNumberOfLives) || newNumberOfLives < 0 || newMaxNumberOfPlayers === undefined || !isNumeric(newMaxNumberOfPlayers) || newMaxNumberOfPlayers < 0) {
        closeModalWindow()
        const formContent = `
            <form name="information" id="information" class="modal-window__form">
                <p>üò° –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!</p>
                <button type="button" onclick="closeModalWindow();">OK</button>
            </form>
        `;
        callModalWindow('–£–ø—Å!', formContent);
        return
    } else {
        gameSettings.numberOfLives = newNumberOfLives;
        gameSettings.maxNumberOfPlayers = newMaxNumberOfPlayers;
        closeModalWindow()
        displayCards(playersData);
    }
}

function callModalFreePik() {
    const formContent = `
        <form name="thanks" id="thanks" class="modal-window__form">
            <p>–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ Freepik –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–∞:</p>
            <ul>
                <li><a href='https://ru.freepik.com/free-vector/–≤–µ–∫—Ç–æ—Ä—ã_1528571.htm' target="_blanc">–ú–æ–Ω—Å—Ç—Ä–∏–∫–æ–≤</a></li>
                <li><a href="https://ru.freepik.com/free-vector/_1528574.htm" target="_blanc">–ï—â—ë –º–æ–Ω—Å—Ç—Ä–∏–∫–æ–≤</a></li>
                <li><a href="https://ru.freepik.com/free-vector/_887838.htm" target="_blanc">–°–µ—Ä–¥–µ—á–∫–æ</a></li>
            </ul>
            <button type="button" onclick="callModalWindow()">–ó–∞–∫—Ä—ã—Ç—å</button>
        </form>
    `
    callModalWindow('–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏', formContent)
}

function callModalWindow(modalHeader, formContent) {
    const modalWindowContent = `
        <div class="modal-window__content">
            <h2>${modalHeader}</h2>
            <button class="modal-window__close-btn" onclick="closeModalWindow()" title="–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ"><div class="modal-window__close-btn_inner"></div></button>
            ${formContent}
        </div>
    `;
    modalWindow.innerHTML = modalWindowContent;
    modalWindow.classList.toggle('modal-window_display');
    backgroundModalWindow.classList.toggle("modal-background_display");
}

function closeModalWindow() {
    modalWindow.classList.toggle("modal-window_display");
    backgroundModalWindow.classList.toggle("modal-background_display");
}